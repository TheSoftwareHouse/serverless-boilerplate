service: ${env:APP_NAME, 'tshExampleApp'}
useDotenv: true
plugins:
  - serverless-step-functions-local
  - serverless-step-functions
  - serverless-webpack
  - serverless-offline

package:
  individually: true

custom:
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET_ID_1}
      - ${env:SUBNET_ID_2}
  webpack:
    webpackConfig: "webpack.config.js"
    packager: "npm"
  stepFunctionsLocal:
    externalInstance: true
    accountId: 101010101010
    region: us-east-1
    stepFunctionsEndpoint: http://127.0.0.1:8083
    TaskResourceMapping:
      exampleStep: arn:aws:lambda:us-east-1:101010101010:function:${env:APP_NAME, 'tshExampleApp'}-${opt:stage, 'dev'}-example-step-lambda
      # PLOP_ADD_WORKFLOW_STEP_LOCAL_STEP

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_LAMBDAS_REGION, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30
  logRetentionInDays: 30
  environment:
    APP_NAME: ${env:APP_NAME, 'tshExampleApp'}
    AWS_LAMBDAS_REGION: ${env:AWS_LAMBDAS_REGION, 'eu-west-1'}
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:DetachNetworkInterface
        Resource: "*"
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
          - states:StartExecution
        Resource:
          - "*"

functions:
  - ${file(functions/migrations/function.yml)}
  - ${file(functions/example-lambda/function.yml)}
  - ${file(workflows/example-workflow/example-step/function.yml)}
  # PLOP_ADD_LAMBDA

stepFunctions:
  stateMachines:
    ExampleWorkflow: ${file(workflows/example-workflow/workflow.yml)}
  # PLOP_ADD_WORKFLOW_STATE_MACHINE

resources:
  Outputs:
    ExampleWorkflowStateMachine:
      Description: Example workflow state machine Arn
      Value:
        Ref: ExampleWorkflow${self:service}${opt:stage, 'dev'}
    # PLOP_ADD_WORKFLOW_RESOURCE
